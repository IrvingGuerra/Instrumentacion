package Formularios;

import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jssc.SerialPort;
import static jssc.SerialPort.MASK_RXCHAR;
import jssc.SerialPortEvent;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author Irving Guerra
 */
public class Principal extends javax.swing.JFrame {
    //Variables globales
    SerialPort sp = null;
    ObservableList<String> puertosDisponibles;
    int idPuerto;
    String nombrePuerto;
    int i;
    int firsTIME = 0;
    String primerString = "";
    String segundoString = "";
    
    String Calor = "";
    String Luz = "";
    String Magnetico = "";
    //Conexion a BD
    Conexion conexion = new Conexion();
    
    private int x;
    private int y;

    private void detectarPuertos(){
        //Esta función nos permite detectar los puerto COM disponibles en nuestra PC
        //para luego ser agregados a nustro jListBox
        //Nota: Los puertos COM los pueden crear con EltimaSerialPort
        puertosDisponibles = FXCollections.observableArrayList();
        String[] serialPortNames = SerialPortList.getPortNames();
        for(String name: serialPortNames){
            System.out.println(name);
            puertosDisponibles.add(name);
            listaPuertos.addItem(name);//Aquí agregamos los item a nuestro jListBox
        }
    }
    
  
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        personalizarFormulario();
        detectarPuertos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        listaPuertos = new javax.swing.JComboBox<>();
        botonConDes = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rx = new javax.swing.JTextArea();
        btnSalir = new javax.swing.JButton();
        lblCalor = new javax.swing.JLabel();
        lblLuz = new javax.swing.JLabel();
        lblIman = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        lblWallpaper = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UpdateMySensor 1.0");
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listaPuertos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaPuertosActionPerformed(evt);
            }
        });
        getContentPane().add(listaPuertos, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 60, 20));

        botonConDes.setBackground(new java.awt.Color(0, 0, 0));
        botonConDes.setText("Conectar");
        botonConDes.setToolTipText("");
        botonConDes.setBorder(null);
        botonConDes.setBorderPainted(false);
        botonConDes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonConDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConDesActionPerformed(evt);
            }
        });
        getContentPane().add(botonConDes, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 110, 50));

        rx.setColumns(20);
        rx.setRows(5);
        jScrollPane2.setViewportView(rx);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, 190, 40));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/exit.png"))); // NOI18N
        btnSalir.setToolTipText("");
        btnSalir.setBorder(null);
        btnSalir.setBorderPainted(false);
        btnSalir.setContentAreaFilled(false);
        btnSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalir.setFocusable(false);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 390, 50, 50));

        lblCalor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Termometro/0.png"))); // NOI18N
        getContentPane().add(lblCalor, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 180, -1));

        lblLuz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Luz/0.png"))); // NOI18N
        getContentPane().add(lblLuz, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, -1, -1));

        lblIman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Magnetismo/0.png"))); // NOI18N
        getContentPane().add(lblIman, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 170, 300));
        getContentPane().add(lblInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 430, 250, 20));

        lblWallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/wallpaperWhite.png"))); // NOI18N
        lblWallpaper.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblWallpaperMouseDragged(evt);
            }
        });
        lblWallpaper.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblWallpaperMousePressed(evt);
            }
        });
        getContentPane().add(lblWallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void botonConDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConDesActionPerformed
                
        //En el evento de este botón nos conectamos a el puerto COM seleccionado
        switch(botonConDes.getText()){
            case "Conectar":  
                idPuerto=listaPuertos.getSelectedIndex();
                String numeroPuerto = listaPuertos.getItemAt(idPuerto).replace("COM", "");
                nombrePuerto="COM"+numeroPuerto;  
                System.out.println("El puerto es: "+nombrePuerto);
                boolean conn=ConectarHardware(nombrePuerto);// Si la variable "conn= true" es por que se realizó la conexión
                if (conn==true) {
                    botonConDes.setText("Desconectar");
                    listaPuertos.setEnabled(false);
                    
                } else {
                    botonConDes.setText("Conectar");
                    listaPuertos.setEnabled(true);
                    firsTIME = 0;
                }
                break;                
            case "Desconectar":
                desconectar();
                botonConDes.setText("Conectar");
                listaPuertos.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_botonConDesActionPerformed

    private void listaPuertosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaPuertosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaPuertosActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
       System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void lblWallpaperMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblWallpaperMousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_lblWallpaperMousePressed

    private void lblWallpaperMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblWallpaperMouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x,this.getLocation().y + evt.getY() -y );
    }//GEN-LAST:event_lblWallpaperMouseDragged
    public boolean ConectarHardware(String port){
        //Esta es la función que nos permite conectarnos a puerto serial,
        //para esto tenemos que enviarle el nombre del puerto seleccionado
        System.out.println("Conectado a el puerto:"+ " " + port);        
        boolean success = false;
        Icon iconoCalor;
        //Aqui configuramos los parámtros del puerto serial
        SerialPort serialPort = new SerialPort(port);
        try {
            serialPort.openPort();
            serialPort.setParams(
                    SerialPort.BAUDRATE_9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE);
            serialPort.setEventsMask(MASK_RXCHAR);
            serialPort.addEventListener((SerialPortEvent serialPortEvent) -> {
                if(serialPortEvent.isRXCHAR()){
                    try {
                        //Aqui realizamos la lectura del puerto COM
                        //Reibiremos Aproximadamente 10 datos para estabilizar las velocidades
                        if(firsTIME < 10 ){
                            primerString = serialPort.readString();
                            String[] Sensores = primerString.split(",");
                            Thread.sleep(1000);
                            firsTIME++;
                            System.out.println("[ TimeOff | OK | "+firsTIME+" ] Estabilizando Velocidades");
                            lblInfo.setText("[ TimeOff | OK | "+firsTIME+" ] Estabilizando Velocidades");
                            lblInfo.setHorizontalAlignment(SwingConstants.CENTER);
                            lblInfo.setVerticalAlignment(SwingConstants.CENTER);
                            
                            ImageIcon imagen = new javax.swing.ImageIcon(getClass().getResource("/Termometro/0.png"));
                            Icon icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblCalor.getWidth(),lblCalor.getHeight(),Image.SCALE_DEFAULT));
                            lblCalor.setIcon(icono);
                            
                            imagen = new javax.swing.ImageIcon(getClass().getResource("/Luz/0.png"));
                            icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblLuz.getWidth(),lblLuz.getHeight(),Image.SCALE_DEFAULT));
                            lblLuz.setIcon(icono);
                            
                            imagen = new javax.swing.ImageIcon(getClass().getResource("/Magnetismo/0.png"));
                            icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblIman.getWidth(),lblIman.getHeight(),Image.SCALE_DEFAULT));
                            lblIman.setIcon(icono); 
                        }
                        if(firsTIME >= 10){
                            segundoString = serialPort.readString();
                            if(primerString.equals(segundoString)){
                                //No sera necesario imprimir y evitamos lagg
                                System.out.println("[ TimeOff | OK | "+firsTIME+" ] Mismo dato");
                                lblInfo.setText("[ TimeOff | OK | "+firsTIME+" ] Mismo dato");
                                Thread.sleep(1000);
                                firsTIME++;
                            }else{
                                System.out.print("[ TimeOff | OK | "+firsTIME+" ] Sensor Actualizado -> ");
                                lblInfo.setText("[ TimeOff | OK | "+firsTIME+" ] Sensor Actualizado -> ");
                                primerString = segundoString;
                                segundoString="";
                                rx.setText(primerString);
                                String[] parts = primerString.split(",");
                                Calor = parts[0];
                                Luz = parts[1];
                                Magnetico = parts[2];
                                
                                //En esta parte ira la decodificacion a imagenes.
                                
                                String imgCalor = "";
                                String imgWatts = "";
                                String imgIman = "";
                                
                                int leerCalor = Integer.parseInt(Calor);
                                        
                                if(leerCalor >= 0 && leerCalor < 5){
                                    imgCalor = "/Termometro/0.png";  
                                }else if(leerCalor >= 5 && leerCalor < 10){
                                    imgCalor = "/Termometro/5.png";  
                                }else if(leerCalor >= 10 && leerCalor < 15){
                                    imgCalor = "/Termometro/10.png";  
                                }else if(leerCalor >= 15 && leerCalor < 20){
                                    imgCalor = "/Termometro/15.png";  
                                }else if(leerCalor >= 20 && leerCalor < 25){
                                    imgCalor = "/Termometro/20.png";  
                                }else if(leerCalor >= 25 && leerCalor < 30){
                                    imgCalor = "/Termometro/25.png";  
                                }else if(leerCalor >= 30 && leerCalor < 35){
                                    imgCalor = "/Termometro/30.png";  
                                }else if(leerCalor >= 35 && leerCalor < 40){
                                    imgCalor = "/Termometro/35.png";  
                                }else if(leerCalor >= 40 && leerCalor < 45){
                                    imgCalor = "/Termometro/40.png";  
                                }else if(leerCalor >= 45 && leerCalor < 50){
                                    imgCalor = "/Termometro/45.png";  
                                }else if(leerCalor >= 50 && leerCalor < 55){
                                    imgCalor = "/Termometro/50.png";  
                                }else if(leerCalor >= 55 && leerCalor < 60){
                                    imgCalor = "/Termometro/55.png";  
                                }else if(leerCalor >= 60 && leerCalor < 65){
                                    imgCalor = "/Termometro/60.png";  
                                }else if(leerCalor >= 65 && leerCalor < 70){
                                    imgCalor = "/Termometro/65.png";  
                                }else if(leerCalor >= 70 && leerCalor < 75){
                                    imgCalor = "/Termometro/70.png";  
                                }else if(leerCalor >= 75 && leerCalor < 80){
                                    imgCalor = "/Termometro/75.png";  
                                }else if(leerCalor >= 80 && leerCalor < 85){
                                    imgCalor = "/Termometro/80.png";  
                                }else if(leerCalor >= 85 && leerCalor < 90){
                                    imgCalor = "/Termometro/85.png";  
                                }else if(leerCalor >= 90 && leerCalor < 95){
                                    imgCalor = "/Termometro/90.png";  
                                }else if(leerCalor >= 95 && leerCalor < 100){
                                    imgCalor = "/Termometro/95.png";  
                                }else{
                                    imgCalor = "/Termometro/100.png";  
                                }
                                
                                int leerWatts = Integer.parseInt(Luz);
                                //El sensor de Luz cambia un poco su logica, ya que entrega:
                                // OBSCURIDAD | 25W | 40W | 60W | 75W | 100W | Total
                                ///   0V      |2.86 | 2.49| 2.46| 2.39| 2.36 | 2.29
                                //Amplificando GANANCIA = 1.1538461538461538  
                                //    0V      | 3.3 | 2.87| 2.83| 2.75| 2.72 | 2.64
                                //BITS 3.3 - > 1023
                                // 0 | 1023 | 889.7 | 877.3 | 852.5 | 843.2 | 818.4
                                
                                if(leerWatts>=0 && leerWatts<100){ //Oscuridad
                                    imgWatts = "/Luz/0.png";  
                                }else if(leerWatts>=940 && leerWatts<1000){ //25W
                                    imgWatts = "/Luz/1.png";  
                                }else if(leerWatts>=900&& leerWatts<940){ //40W
                                    imgWatts = "/Luz/2.png";  
                                }else if(leerWatts>=850 && leerWatts<900){ //60W
                                    imgWatts = "/Luz/3.png";  
                                }else if(leerWatts>=800 && leerWatts<850){ //75W
                                    imgWatts = "/Luz/4.png";  
                                }else if(leerWatts>=790 && leerWatts<800){ //100W
                                    imgWatts = "/Luz/5.png";  
                                }else if(leerWatts>=600 && leerWatts<=790){ //LUZ TOTAL
                                    imgWatts = "/Luz/6.png";  
                                }else{
                                    imgWatts = "/Luz/6.png"; 
                                }
                                
    
                                int leerGauss = Integer.parseInt(Magnetico);
                                
                                if(leerGauss >= -1700 && leerGauss < -1500){
                                    imgIman = "/Magnetismo/-7.png";  
                                }else if(leerGauss >= -1500 && leerGauss < -1250){
                                    imgIman = "/Magnetismo/-6.png";  
                                }else if(leerGauss >= -1250 && leerGauss < -1000){
                                    imgIman = "/Magnetismo/-5.png";  
                                }else if(leerGauss >= -1000 && leerGauss < -750){
                                    imgIman = "/Magnetismo/-4.png";  
                                }else if(leerGauss >= -750 && leerGauss < -500){
                                    imgIman = "/Magnetismo/-3.png";  
                                }else if(leerGauss >= -500 && leerGauss < -250){
                                    imgIman = "/Magnetismo/-2.png";  
                                }else if(leerGauss >= -250 && leerGauss < -5){
                                    imgIman = "/Magnetismo/-1.png";  
                                }else if(leerGauss >= -5 && leerGauss < 5){
                                    imgIman = "/Magnetismo/0.png";  
                                }else if(leerGauss >= 5 && leerGauss < 70){
                                    imgIman = "/Magnetismo/1.png";  
                                }else if(leerGauss >= 65 && leerGauss < 130){
                                    imgIman = "/Magnetismo/2.png";  
                                }else if(leerGauss >= 130 && leerGauss < 195){
                                    imgIman = "/Magnetismo/3.png";  
                                }else if(leerGauss >= 195 && leerGauss < 260){
                                    imgIman = "/Magnetismo/4.png";  
                                }else if(leerGauss >= 260 && leerGauss < 325){
                                    imgIman = "/Magnetismo/5.png";  
                                }else if(leerGauss >= 325 && leerGauss < 390){
                                    imgIman = "/Magnetismo/6.png";  
                                }else if(leerGauss >= 390 && leerGauss < 1700){
                                    imgIman = "/Magnetismo/7.png";  
                                }
                                
                                
                                ImageIcon imagen = new javax.swing.ImageIcon(getClass().getResource(imgCalor));
                                Icon icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblCalor.getWidth(),lblCalor.getHeight(),Image.SCALE_DEFAULT));
                                lblCalor.setIcon(icono);   
                                
                                imagen = new javax.swing.ImageIcon(getClass().getResource(imgWatts));
                                icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblLuz.getWidth(),lblLuz.getHeight(),Image.SCALE_DEFAULT));
                                lblLuz.setIcon(icono);  
                                
                                imagen = new javax.swing.ImageIcon(getClass().getResource(imgIman));
                                icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblIman.getWidth(),lblIman.getHeight(),Image.SCALE_DEFAULT));
                                lblIman.setIcon(icono);  
                                ////////////////////////////////////////////////
                                
                                System.out.println("Calor:"+Calor+" | Luz:"+Luz+" | Magnetico:"+ Magnetico);
                                lblInfo.setText("Calor:"+Calor+" | Luz:"+Luz+" | Magnetico:"+ Magnetico);
                                Thread.sleep(1000);
                                firsTIME++;
                            }
                        }
                        if(firsTIME % 60 == 0){ //Cada minuto
                            conexion.conectar();                          
                            int ok = conexion.saveSensors(primerString);
                            if(ok==1){
                                System.out.println("[ SERVER | OK ] Datos guardados en BD\n");
                                lblInfo.setText("[ SERVER | OK ] Datos guardados en BD\n");
                            }else{
                                System.out.println("[ SERVER | FAIL ] Datos no se guardaron en BD\n");
                                lblInfo.setText("[ SERVER | FAIL ] Datos no se guardaron en BD\n");
                            }
                            conexion.cerrar();
                        }        
                    } catch (SerialPortException ex) {
                        Logger.getLogger(Principal.class.getName())
                                .log(Level.SEVERE, null, ex);
                        System.out.println("No se pudo recibir el dato");
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            
            sp = serialPort;
            success = true;
        } catch (SerialPortException ex) {
            Logger.getLogger(Principal.class.getName())
                    .log(Level.SEVERE, null, ex);
            System.out.println("Error al tratar de conectarse al puerto"+ port);
            JOptionPane.showMessageDialog(null,"No se pudo realizar la conexión, por favor seleccione otro puerto:"+ " " + port );
        }
        return success;
    }
    
    public void desconectar(){
        //Esta función es la que utilizamos para desconectarnos del puerto COM
        if(sp != null){//Verificamos si estamos conectados
            try {
                sp.removeEventListener();
                if(sp.isOpened()){
                    sp.closePort();
                    System.out.println("Se ha desconectaro del puerto exitosamente");
                }
               
                sp = null;
            } catch (SerialPortException ex) {
                Logger.getLogger(Principal.class.getName())
                        .log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonConDes;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JLabel lblCalor;
    private javax.swing.JLabel lblIman;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblLuz;
    private javax.swing.JLabel lblWallpaper;
    private javax.swing.JComboBox<String> listaPuertos;
    private javax.swing.JTextArea rx;
    // End of variables declaration//GEN-END:variables

    private void personalizarFormulario() {
    this.setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/Recursos/usb.png")).getImage());
        try {
            //com.sun.java.swing.plaf.windows.WindowsLookAndFeel
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
